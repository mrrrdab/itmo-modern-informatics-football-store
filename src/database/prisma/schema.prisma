generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique
  password         String             @unique
  refreshToken     String?            @unique
  role             Role
  isVerified       Boolean            @default(false)
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime           @updatedAt @db.Timestamptz(3)
  verifToken       EmailVerification?
  customer         Customer?
  Administrator    Administrator?
  Moderator        Moderator?
}

model Administrator {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String      @unique @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderators Moderator[]
}

model Moderator {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @unique @db.Uuid
  administratorId String        @db.Uuid
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  administrator   Administrator @relation(fields: [administratorId], references: [id])
  products        Product[]
}

model Customer {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName   String
  lastName    String
  birthDate   DateTime
  phoneNumber String
  userId      String   @unique @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  cart        Cart?
}

model EmailVerification {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  verifToken       String   @unique
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  expiresAt        DateTime @default(dbgenerated("NOW() + interval '1 hour'")) @db.Timestamptz(3)
  userId           String   @unique @db.Uuid
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String          @db.Text
  price         Decimal
  imageUrl      String
  club          Club
  category      ProductCategory
  age           AgeCategory
  gender        Gender
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  moderator     Moderator       @relation(fields: [moderatorId], references: [id])
  moderatorId   String          @db.Uuid
  clothing      Clothing[]
  Footwear      Footwear[]
  Accessory     Accessory?
  OrderItem     OrderItem?
}

model Clothing {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  size          ClothingSize
  stockQuantity Int
  product       Product      @relation(fields: [productId], references: [id])
  productId     String       @db.Uuid
}

model Footwear {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  size          FootwearSize
  stockQuantity Int
  product       Product      @relation(fields: [productId], references: [id])
  productId     String       @db.Uuid
}

model Accessory {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stockQuantity Int
  product       Product @relation(fields: [productId], references: [id])
  productId     String  @unique @db.Uuid
}

model Cart {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total      Decimal     @default(0)
  quantity   Int         @default(0)
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime    @updatedAt @db.Timestamptz(3)
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String      @unique @db.Uuid
  orderItems OrderItem[]
}

model Order {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total      Decimal
  quantity   Int
  status     OrderStatus @default(CREATED)
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String      @db.Uuid
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity  Int      @default(1)
  size      String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique @db.Uuid
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?   @db.Uuid
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @db.Uuid
}

enum Role {
  CUSTOMER
  MODERATOR
  ADMINISTRATOR
}

enum Club {
  BAYERN_MUNICH
  BORUSSIA_DORTMUND
  RB_LEIPZIG
  BAYER_04_LEVERKUSEN
  HOFFENHEIM
}

enum ProductCategory {
  UPPER_CLOTHING
  LOWER_CLOTHING
  FOOTWEAR
  ACCESSORIES
}

enum AgeCategory {
  CHILD
  ADULT
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

enum ClothingSize {
  SIZE_S
  SIZE_M
  SIZE_L
  SIZE_XL
}

enum FootwearSize {
  SIZE_33
  SIZE_34
  SIZE_35
  SIZE_36
  SIZE_37
  SIZE_38
  SIZE_39
  SIZE_40
  SIZE_41
  SIZE_42
}

enum OrderStatus {
  CREATED
  REVIEW
  CONFIRMED
  REJECTED
  SHIPPED
  DELIVERED
}
